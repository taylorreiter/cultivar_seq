# Install everything
sudo apt-get update && \
sudo apt-get -y install screen git curl gcc make g++ python-dev unzip \
        default-jre pkg-config libncurses5-dev r-base-core r-cran-gplots \
        python-matplotlib python-pip python-virtualenv sysstat fastqc \
        trimmomatic bowtie samtools blast2 wget bowtie2 openjdk-8-jre \
        hmmer ruby

# Install khmer
cd ~/
python2.7 -m virtualenv pondenv
source pondenv/bin/activate
cd pondenv
pip install -U setuptools
git clone --branch v2.0 https://github.com/dib-lab/khmer.git
cd khmer
make install

# Install trinity
cd ${HOME}
wget https://github.com/trinityrnaseq/trinityrnaseq/archive/Trinity-v2.3.2.tar.gz \
 -O trinity.tar.gz
tar xzf trinity.tar.gz
cd trinityrnaseq*/
make |& tee trinity-build.log

echo export PATH=$PATH:$(pwd) >> ~/pondenv/bin/activate
source ~/pondenv/bin/activate

# Set default java to 1.8

## RUN THIS EVERY TIME NEW SESSION/TERMINAL IS STARTED
source ~/pondenv/bin/activate



# Transrate
cd
curl -LO https://bintray.com/artifact/download/blahah/generic/transrate-1.0.3-linux-x86_64.tar.gz
tar -zxf transrate-1.0.3-linux-x86_64.tar.gz
echo 'export PATH=$PATH:"$HOME/transrate-1.0.3-linux-x86_64"' >> ~/pondenv/bin/activate
curl -LO ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.3.0/ncbi-blast-2.3.0+-x64-linux.tar.gz
tar -zxf ncbi-blast-2.3.0+-x64-linux.tar.gz
echo 'export PATH="$HOME/ncbi-blast-2.3.0+/bin:$PATH"' >> ~/pondenv/bin/activate
source ~/pondenv/bin/activate

# Busco
cd
git clone https://gitlab.com/ezlab/busco.git
cd busco
echo "export PATH=$PATH:$(pwd)" >> ~/pondenv/bin/activate
curl -OL http://busco.ezlab.org/datasets/metazoa_odb9.tar.gz
curl -OL http://busco.ezlab.org/datasets/eukaryota_odb9.tar.gz
tar -xzvf metazoa_odb9.tar.gz
tar -xzvf eukaryota_odb9.tar.gz
source ~/pondenv/bin/activate

# Salmon
cd
curl -LO https://github.com/COMBINE-lab/salmon/releases/download/v0.7.2/Salmon-0.7.2_linux_x86_64.tar.gz
tar -xvzf Salmon-0.7.2_linux_x86_64.tar.gz
cd Salmon*/bin
echo export PATH=$PATH:$(pwd) >> ~/pondenv/bin/activate
source ~/pondenv/bin/activate

# make mnt writeable
sudo chmod a+rwxt /mnt

# sub directories
cd /mnt
mkdir -p work work/data
cd /mnt/work/data

export PROJECT=/mnt/work

(moving 'cultivars' from old code >> 
mv ~/cultivars /mnt/work/cultivars

## "data" in eel pond protocol will be called "cultivars" from here forward

# make sure PROJECT location has been defined:
set -u
printf "\nMy raw data is in $PROJECT/cultivars/, and consists of $(ls -1 ${PROJECT}/cultivars/*.fastq.gz | wc -l) files\n\n"
set +u

# make workspace for quality trimming
cd ${PROJECT}
mkdir -p quality
cd quality

# link data to new workspace
ln -s ../cultivars/*.fastq.gz .

# check to make sure it worked
printf "I see $(ls -1 *.fastq.gz | wc -l) files here.\n"

# Skipping fastqc, already complete (see old code)

# Copy trimmed sequence to that directory
cp ~/projects/eelpond/trimmed/SRR* .

#
set -u
printf "\nMy QC-trimmed files are in $PROJECT/quality/, and consist of $(ls -1 ${PROJECT}/quality/*trim.fastq.gz | wc -l) files\n\n"
set +u

# digital normalization
cd ${PROJECT}
mkdir -p diginorm
cd diginorm
ln -s ../quality/*_trim.fastq.gz .

# normalize by median
normalize-by-median.py -k 20 -C 20 -M 4e9 \
 --savegraph normC20k20.ct *_trim.fastq.gz
 
filter-abund.py -V -Z 18 normC20k20.ct *.keep
 
# rename
for file in *.abundfilt
do
  newfile=${file%%.fastq.gz.keep}.keep.abundfilt.fq
  mv ${file} ${newfile}
  gzip ${newfile}
done

# Make sure PROJECT directory is still set and files are there
set -u
printf "\nMy diginormed files are in $PROJECT/diginorm/, and consist of $(ls -1 ${PROJECT}/diginorm/*.keep.abundfilt.fq.gz | wc -l) files\n\n"
set +u

# Make directory for assembly
cd ${PROJECT}
mkdir -p assembly
cd assembly

# Run Trinity
Trinity --single ../diginorm/*keep.abundfilt.fq.gz --seqType fq --max_memory 15G --CPU 2
 # ^C @ 51%. preform pipeline on the rest of the samples, upgrade instance size, and continue.
 
 ------------------------------------------------------
# Make sure all files are in the right place
set -u
printf "\nMy raw data is in $PROJECT/cultivars/, and consists of $(ls -1 ${PROJECT}/cultivars/*.fastq.gz | wc -l) files\n\n"
set +u

# navigate to quality directory
cd quality

# link data to new workspace
ln -s ../cultivars/*.fastq.gz .

# check to make sure it worked
printf "I see $(ls -1 *.fastq.gz | wc -l) files here.\n"

# Move adapter file
mv ~/projects/eelpond/Illumina-adaptors.fa Illumina-adaptors.fa

# trimming!
# Skip the file that is already trimmed:

for filename in SRR926283.fastq.gz  SRR926285.fastq.gz  SRR926287.fastq.gz SRR926284.fastq.gz  SRR926286.fastq.gz
do
     # first, make the base by removing fastq.gz
     base=$(basename $filename .fastq.gz)
     echo $base

     # finally, run Trimmomatic
     TrimmomaticSE ${base}.fastq.gz ${base}qc.fq.gz ILLUMINACLIP:Illumina-adaptors.fa:2:40:15 LEADING:2 TRAILING:2 SLIDINGWINDOW:4:2 MINLEN:25
done

# rename pre-trimmed file
echo mv SRR926282_trim.fastq.gz SRR926282qc.fq.gz

# make it hard to mess files up
chmod u-w ${PROJECT}/quality/*qc.fq.gz

# make sure data is in the right place
set -u
printf "\nMy QC-trimmed files are in $PROJECT/quality/, and consist of $(ls -1 ${PROJECT}/quality/*qc.fq.gz | wc -l) files\n\n"
set +u

# digital normalization
cd ${PROJECT}
mkdir -p diginorm
cd diginorm
ln -s ../quality/*qc.fq.gz .

 normalize-by-median.py --ksize 20 --cutoff 20 -M 15e9 --savegraph normC20k20.ct *qc.fq.gz
 
 # Filter erroneous kmers
  filter-abund.py -V -Z 18 normC20k20.ct *.keep
 
# rename
for file in *.abundfilt
do
  newfile=${file%%.fastq.gz.keep}.keep.abundfilt.fq
  mv ${file} ${newfile}
  gzip ${newfile}
done
