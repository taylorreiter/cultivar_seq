sudo apt-get update && \
sudo apt-get -y install screen git curl gcc make g++ python-dev unzip \
        default-jre pkg-config libncurses5-dev r-base-core r-cran-gplots \
        python-matplotlib python-pip python-virtualenv sysstat fastqc \
        trimmomatic bowtie samtools blast2 wget bowtie2 openjdk-8-jre \
        hmmer ruby
        
# Install khmer        
cd ~/
python2.7 -m virtualenv pondenv
source pondenv/bin/activate
cd pondenv
pip install -U setuptools
git clone --branch v2.0 https://github.com/dib-lab/khmer.git
cd khmer
make install

source ~/pondenv/bin/activate

# Install Trinity
cd ${HOME}
wget https://github.com/trinityrnaseq/trinityrnaseq/archive/Trinity-v2.3.2.tar.gz \
 -O trinity.tar.gz
tar xzf trinity.tar.gz
cd trinityrnaseq*/
make |& tee trinity-build.log

echo export PATH=$PATH:$(pwd) >> ~/pondenv/bin/activate
source ~/pondenv/bin/activate

# Set Java
sudo update-alternatives --set java /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java

# Install transrate
cd
curl -LO https://bintray.com/artifact/download/blahah/generic/transrate-1.0.3-linux-x86_64.tar.gz
tar -zxf transrate-1.0.3-linux-x86_64.tar.gz
echo 'export PATH=$PATH:"$HOME/transrate-1.0.3-linux-x86_64"' >> ~/pondenv/bin/activate
curl -LO ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/2.3.0/ncbi-blast-2.3.0+-x64-linux.tar.gz
tar -zxf ncbi-blast-2.3.0+-x64-linux.tar.gz
echo 'export PATH="$HOME/ncbi-blast-2.3.0+/bin:$PATH"' >> ~/pondenv/bin/activate
source ~/pondenv/bin/activate

# install BUSCO
cd
git clone https://gitlab.com/ezlab/busco.git
cd busco
echo "export PATH=$PATH:$(pwd)" >> ~/pondenv/bin/activate
echo 'export PATH=$PATH:$HOME/busco' >> $HOME/.bashrc
wget http://busco.ezlab.org/v2/datasets/fungi_odb9.tar.gz
wget http://busco.ezlab.org/v2/datasets/embryophyta_odb9.tar.gz
wget http://busco.ezlab.org/v2/datasets/saccharomyceta_odb9.tar.gz
wget http://busco.ezlab.org/v2/datasets/saccharomycetales_odb9.tar.gz
wget http://busco.ezlab.org/v2/datasets/bacteria_odb9.tar.gz
# wget http://busco.ezlab.org/v2/datasets/proteobacteria_odb9.tar.gz
# wget http://busco.ezlab.org/v2/datasets/rhizobiales_odb9.tar.gz
# wget http://busco.ezlab.org/v2/datasets/betaproteobacteria_odb9.tar.gz
# wget http://busco.ezlab.org/v2/datasets/gammaproteobacteria_odb9.tar.gz
# wget http://busco.ezlab.org/v2/datasets/enterobacteriales_odb9.tar.gz
# wget http://busco.ezlab.org/v2/datasets/deltaepsilonsub_odb9.tar.gz
# wget http://busco.ezlab.org/v2/datasets/actinobacteria_odb9.tar.gz
# wget http://busco.ezlab.org/v2/datasets/cyanobacteria_odb9.tar.gz
# wget http://busco.ezlab.org/v2/datasets/firmicutes_odb9.tar.gz
# wget http://busco.ezlab.org/v2/datasets/clostridia_odb9.tar.gz
# wget http://busco.ezlab.org/v2/datasets/lactobacillales_odb9.tar.gz
# wget http://busco.ezlab.org/v2/datasets/bacillales_odb9.tar.gz
# wget http://busco.ezlab.org/v2/datasets/bacteroidetes_odb9.tar.gz
# wget http://busco.ezlab.org/v2/datasets/spirochaetes_odb9.tar.gz
# wget http://busco.ezlab.org/v2/datasets/tenericutes_odb9.tar.gz
# tar -xzvf tenericutes_odb9.tar.gz
# tar -xzvf spirochaetes_odb9.tar.gz
# tar -xzvf bacteroidetes_odb9.tar.gz
#tar -xzvf bacillales_odb9.tar.gz
#tar -xzvf lactobacillales_odb9.tar.gz
#tar -xzvf clostridia_odb9.tar.gz
#tar -xzvf firmicutes_odb9.tar.gz
#tar -xzvf cyanobacteria_odb9.tar.gz
#tar -xzvf actinobacteria_odb9.tar.gz
#tar -xzvf deltaepsilonsub_odb9.tar.gz
tar -xzvf fungi_odb9.tar.gz
tar -xzvf embryophyta_odb9.tar.gz
tar -xzvf saccharomyceta_odb9.tar.gz
tar -xzvf saccharomycetales_odb9.tar.gz
tar -xzvf bacteria_odb9.tar.gz
#tar -xzvf proteobacteria_odb9.tar.gz
#tar -xzvf rhizobiales_odb9.tar.gz
#tar -xzvf betaproteobacteria_odb9.tar.gz
#tar -xzvf gammaproteobacteria_odb9.tar.gz
#tar -xzvf enterobacteriales_odb9.tar.gz
source ~/pondenv/bin/activate

# Install salmon
cd
curl -LO https://github.com/COMBINE-lab/salmon/releases/download/v0.7.2/Salmon-0.7.2_linux_x86_64.tar.gz
tar -xvzf Salmon-0.7.2_linux_x86_64.tar.gz
cd Salmon*/bin
echo export PATH=$PATH:$(pwd) >> ~/pondenv/bin/activate
source ~/pondenv/bin/activate

# export project
export PROJECT=/mnt/work
----------------------------------------------------------------------
# diginorm hisat unaligned files
cd /mnt/work/hisat/unaligned
mkdir -p diginorm
cd diginorm
ln -s ../unaligned/*qc.fq.gz .

# normalization
normalize-by-median.py --ksize 20 --cutoff 20 -M 15e9 --savegraph normC20k20.ct *qc.fq.gz

# trim erroneous kmers
filter-abund.py -V -Z 18 normC20k20.ct *.keep && \
  rm *.keep normC20k20.ct

# Rename
for file in *.abundfilt
do
  newfile=${file%%.fq.gz.keep.abundfilt}.abundfilt.fq
  mv ${file} ${newfile}
  gzip ${newfile}
done
----------------------------------------------------------------------
# Trinity
cd /mnt/work/hisat/unaligned/
mkdir -p assembly

# upgrade to m4.4xlarge
source ~/pondenv/bin/activate


# lsblk
# sudo mount /dev/xvdf1 /mnt/


# Reset $PROJECT
export PROJECT=/mnt/work

cd /mnt/work/hisat/unaligned/assembly

gunzip -c ../diginorm/*qc.abundfilt.fq.gz > cultivars.fq

Trinity --single cultivars.fq --seqType fq --max_memory 62G --CPU 13 
----------------------------------------------------------------------
# Run dammit

# Install things
cd ~
sudo apt-get -y install ruby hmmer unzip \
    infernal ncbi-blast+ liburi-escape-xs-perl emboss liburi-perl \
    build-essential libsm6 libxrender1 libfontconfig1 \
    parallel libx11-dev
sudo gem install crb-blast

# Install proper version of new paralell
cd
(wget -O - pi.dk/3 || curl pi.dk/3/ || fetch -o - http://pi.dk/3) | bash
sudo cp /home/ubuntu/bin/parallel /usr/bin/parallel

# Transdecoder
cd
curl -LO https://github.com/TransDecoder/TransDecoder/archive/2.0.1.tar.gz
tar -xvzf 2.0.1.tar.gz
cd TransDecoder-2.0.1; make
export PATH=$HOME/TransDecoder-2.0.1:$PATH

# Last
cd
curl -LO http://last.cbrc.jp/last-658.zip
unzip last-658.zip
cd last-658
make
export PATH=$HOME/last-658/src:$PATH
export PATH=$HOME/last-658/scripts:$PATH

# Install busco
cd
curl -LO http://busco.ezlab.org/v1/files/BUSCO_v1.22.tar.gz
tar -xvzf BUSCO_v1.22.tar.gz
chmod +x BUSCO_v1.22/*.py
export PATH=$HOME/BUSCO_v1.22:$PATH
cd

# To add to path permenently
echo 'export PATH=$PATH:$HOME/TransDecoder-2.0.1' >> $HOME/.bashrc
echo 'export PATH=$PATH:$HOME/last-658/src' >> $HOME/.bashrc
echo 'export PATH=$HOME/BUSCO_v1.22:$PATH' >> $HOME/.bashrc


# Install miniconda
cd ~
curl -LO https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh
bash Miniconda3-latest-Linux-x86_64.sh -b
source ~/.bashrc

# create environment for dammit
cd ~
~/miniconda3/bin/conda create -y -n dammit anaconda python=3.5
source ~/miniconda3/bin/activate dammit

# Install things with python dependencies

# conda install -y --file <(curl https://raw.githubusercontent.com/camillescott/shmlast/master/environment.txt)
pip install --upgrade pip
pip install shmlast

# Install matplot lib
pip install https://pypi.python.org/packages/source/m/matplotlib/matplotlib-1.5.1.tar.gz

# Install dammit from refractor branch 1.0
sudo pip install -U setuptools
sudo pip install dammit

# Build databases
dammit databases --install --busco-group eukaryota

# Make directory for annotations
cd /mnt/work/hisat/unaligned/
mkdir -p annotation
cd annotation
ln -s /mnt/work/hisat/unaligned/assembly/trinity_out_dir/Trinity.fasta .

# run dammit
dammit annotate Trinity.fasta --busco-group eukaryota --n_threads 2 | tee dammit_Trinity_outfile.log
source deactivate dammit

# Install KRAKEN
# http://angus.readthedocs.io/en/2016/kraken_species_identification.html
cd ~
sudo apt-get -y update
sudo apt-get -y install bioperl ruby build-essential curl git python-setuptools wget
ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install)"
export PATH="$HOME/.linuxbrew/bin:$PATH"
export PATH="$HOME/.linuxbrew/bin:$PATH"
brew tap homebrew/science
brew install kraken

# Install miniKRAKEN database
# MiniKraken DB (2.7 GB): A pre-built 4 GB database constructed from complete bacterial, archaeal, and viral genomes in RefSeq (as of Dec. 8, 2014). 
# This can be used by users without the computational resources needed to build a Kraken database.
cd $HOME
curl https://ccb.jhu.edu/software/kraken/dl/minikraken.tgz | tar zxvf -
export KRAKEN_DEFAULT_DB=$HOME/minikraken_20141208
export KRAKEN_NUM_THREADS=$(getconf _NPROCESSORS_ONLN)

# Run KRAKEN
mkdir kraken
cd /mnt/work/hisat/unaligned/kraken
ln -s /mnt/work/hisat/unaligned/*qc.fq.gz .

for infile in *qc.fq.gz
do
kraken --preload --db ~/minikraken_20141208 --fastq-input --gzip-compressed ${infile} > ${infile}_kraken.out
done

for infile in *qc.fq.gz
do
kraken-translate --db ~/minikraken_20141208 ${infile}_kraken.out > ${infile}_labels
done


mkdir minikraken_run
for infile in *kraken.out; do mv $infile minikraken_run/$infile; done
for infile in *labels; do mv $infile minikraken_run/$infile; done

# download fungi
# per http://www.opiniomics.org/building-a-kraken-database-with-new-ftp-structure-and-no-gi-numbers/

git clone https://github.com/mw55309/Kraken_db_install_scripts.git
mkdir downloads
cd downloads
perl ~/Kraken_db_install_scripts/download_fungi.pl
perl ~/Kraken_db_install_scripts/download_bacteria.pl
perl ~/Kraken_db_install_scripts/download_archaea.pl
perl ~/Kraken_db_install_scripts/download_protozoa.pl
perl ~/Kraken_db_install_scripts/download_viral.pl

kraken-build --download-taxonomy --db kraken_fungi_080416
kraken-build --download-taxonomy --db kraken_bvfpa_080416

# for each branch add all .fna to the directory (here, only fungi, but loop would incorporate the other possibilities)
for dir in fungi; do
        for fna in `ls $dir/*.fna`; do
                kraken-build --add-to-library $fna --db kraken_fungi_080416
        done
done

for dir in fungi protozoa archaea viral bacteria; do
        for fna in `ls $dir/*.fna`; do
                kraken-build --add-to-library $fna --db kraken_bvfpa_080416
        done
done

# install dependency
brew install jellyfish-1.1
brew link --force jellyfish-1.1

# build database (upgrade to mn m4.2xlarge with 32 gb ram)
kraken-build --build --db kraken_fungi_080416

kraken-build --build --db kraken_bvfpa_080416

# run fungi on unaligned fastq reads
cd /mnt/work/hisat/unaligned
for infile in *qc.fq.gz
do
kraken --preload --db ~/Kraken_db_install_scripts/downloads/kraken_fungi_080416 --fastq-input --gzip-compressed ${infile} > ${infile}_kraken.out
done

# run bvfpa on unaligned fastq reads
cd /mnt/work/hisat/unaligned/
for infile in *qc.fq.gz
do
kraken --preload --db ~/Kraken_db_install_scripts/downloads/kraken_bvfpa_080416 --fastq-input --gzip-compressed ${infile} > ${infile}_kraken_bvfpa.out
done

# This database returned no results...try Kaiju
cd ~
git clone https://github.com/bioinformatics-centre/kaiju.git
cd kaiju/src
make

# make a database with bacteria, archaea, viruses, and eukaryotes
# (smaller worked, try larger)
cd /mnt/work/
mkdir kaijudb_e
cd kaijudb_e
~/kaiju/bin/makeDB.sh -e
# This requires a rediculous amount of free space on the volume.

gunzip unaligned_SRR926282qc.fq.gz
~/kaiju/bin/kaiju -t ~/kaijudb_e/kaijudb_e/nodes.dmp -f ~/kaijudb_e/kaijudb_e/kaiju_db.fmi -i /mnt/work/hisat/unaligned/unaligned_SRR926282qc.fq 

#.fmi file empty. Try smaller database first and see how it performs.
cd /mnt/work
mkdir kaijudb_p
cd kaijudb_p
~/kaiju/bin/makeDB.sh -p

~/kaiju/bin/kaiju -t /mnt/work/kaijudb_p/nodes.dmp -f /mnt/work/kaijudb_p/kaiju_db.fmi -i /mnt/work/hisat/unaligned/unaligned_SRR926282qc.fq 

http://kaiju.binf.ku.dk/database/kaiju_index_nr_euk.tgz
http://kaiju.binf.ku.dk/database/kaiju_index_pg.tgz
